CCS PCM C Compiler, Version 5.015, 5967               16-feb.-23 10:46

               Filename:   K:\tec\semestre 8\micro\7-SEGMENTOS\7SEG.lst

               ROM used:   117 words (1%)
                           Largest free fragment is 2048
               RAM used:   22 (6%) at main() level
                           24 (7%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   01A
0003:  NOP
.................... #include <16F877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC = 10 
.................... #use delay(crystal = 20000000) 
0004:  MOVLW  32
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  BCF    0A.3
0018:  BCF    0A.4
0019:  GOTO   06F (RETURN)
.................... #FUSES NOWDT, NOBROWNOUT, NOLVP, HS 
....................  
.................... //Directiva para utilizar puerto USART 
.................... #use rs232(BAUD=9600, XMIT = PIN_C6, RCV=PIN_C7) 
....................  
.................... #use STANDARD_IO(B) 
....................  
.................... // Se define el array con todas las combinaciones del display 
.................... int8 numeros[] = { 
....................    //-gfedcba 
....................    0b00111111, // 0 
....................    0b00000110, // 1 
....................    0b01011011, // 2 
....................    0b01001111 //3 
....................    0b1100110//4 
....................    0b1101101//5 
....................    0b1111101//6 
....................    0b0000111//7 
....................    0b11111111//8 
....................    0b1101111//9 
....................    0b1110111//A 
....................    0b1111100//B 
....................    0b0111001//C 
....................    0b1011110//D 
....................    0b1111001//E 
....................    0b1110001//F 
.................... }; 
*
002D:  MOVLW  3F
002E:  BCF    03.5
002F:  MOVWF  20
0030:  MOVLW  06
0031:  MOVWF  21
0032:  MOVLW  5B
0033:  MOVWF  22
0034:  MOVLW  4F
0035:  MOVWF  23
0036:  MOVLW  66
0037:  MOVWF  24
0038:  MOVLW  6D
0039:  MOVWF  25
003A:  MOVLW  7D
003B:  MOVWF  26
003C:  MOVLW  07
003D:  MOVWF  27
003E:  MOVLW  FF
003F:  MOVWF  28
0040:  MOVLW  6F
0041:  MOVWF  29
0042:  MOVLW  77
0043:  MOVWF  2A
0044:  MOVLW  7C
0045:  MOVWF  2B
0046:  MOVLW  39
0047:  MOVWF  2C
0048:  MOVLW  5E
0049:  MOVWF  2D
004A:  MOVLW  79
004B:  MOVWF  2E
004C:  MOVLW  71
004D:  MOVWF  2F
....................  
....................  
.................... void main() 
*
001A:  MOVF   03,W
001B:  ANDLW  1F
001C:  MOVWF  03
001D:  MOVLW  81
001E:  BSF    03.5
001F:  MOVWF  19
0020:  MOVLW  A6
0021:  MOVWF  18
0022:  MOVLW  90
0023:  BCF    03.5
0024:  MOVWF  18
0025:  BSF    03.5
0026:  BSF    1F.0
0027:  BSF    1F.1
0028:  BSF    1F.2
0029:  BCF    1F.3
002A:  MOVLW  07
002B:  MOVWF  1C
002C:  BCF    03.7
.................... { 
....................    setup_uart(9600); //Configurar baudios 
*
004E:  MOVLW  81
004F:  BSF    03.5
0050:  MOVWF  19
0051:  MOVLW  A6
0052:  MOVWF  18
0053:  MOVLW  90
0054:  BCF    03.5
0055:  MOVWF  18
....................    // Inicializar pines 
....................    output_b(0); 
0056:  BSF    03.5
0057:  CLRF   06
0058:  BCF    03.5
0059:  CLRF   06
....................     
....................    while (1) 
....................     { 
....................       // Recorrer vector numeros 
....................       for(int8 i = 0; i < sizeof(numeros); i++) 
005A:  CLRF   30
005B:  MOVF   30,W
005C:  SUBLW  0F
005D:  BTFSS  03.0
005E:  GOTO   073
....................       { 
....................          output_b(numeros[i]); // Colocar el número en el puerto B 
005F:  MOVLW  20
0060:  ADDWF  30,W
0061:  MOVWF  04
0062:  BCF    03.7
0063:  MOVF   00,W
0064:  MOVWF  31
0065:  BSF    03.5
0066:  CLRF   06
0067:  BCF    03.5
0068:  MOVF   31,W
0069:  MOVWF  06
....................          delay_ms(500); // Esperar 
006A:  MOVLW  02
006B:  MOVWF  31
006C:  MOVLW  FA
006D:  MOVWF  32
006E:  GOTO   004
006F:  DECFSZ 31,F
0070:  GOTO   06C
0071:  INCF   30,F
0072:  GOTO   05B
....................       } 
0073:  GOTO   05A
....................     } 
.................... } 
0074:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
